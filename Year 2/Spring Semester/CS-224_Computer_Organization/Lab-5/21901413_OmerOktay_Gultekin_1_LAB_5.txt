CS224
Lab No. 5
Section No. 1
Full Name: Omer Oktay Gultekin
Bilkent ID: 21901413
Date: 18.04.2022

# fpga code
`timescale 1ns / 1ps

module fpga_top(input logic clkBtn, rstBtn, clk,
                output logic memwrite, dp,
                output logic [3:0] an,
                output logic [6:0] seg);
    // new clk and reset controlled by buttons
    logic pushedClk, pushedRst;
    
    
    // pulse controllers initialization
    pulse_controller pulseClk(clk, clkBtn, 1'b0, pushedClk);
    pulse_controller pulseRst(clk, rstBtn, 1'b0, pushedRst);
   
    logic [31:0] instrF, PC, PCF;
    logic PcSrcD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD, WritetoRdD, WritetoRdE;
    logic [2:0]  ALUcontrol;
    logic [31:0] instrD, ALUOutE, WriteDataE, RsData, RtData, RD1, RD2, RD3, RD3E;
    logic [1:0]  ForwardAE, ForwardBE, ForwardCE;
    logic ForwardAD, ForwardBD;
    logic StallF, StallD, FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD;
    logic [31:0] PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE;
    logic [4:0]  RsE, RtE, RdE, WriteRegE;
    logic MemWriteE, ALUSrcE, RegDstE;
    logic [2:0]  ALUControlE;
    logic [31:0] ALUOutM, WriteDataM, ReadDataM;
    logic [4:0]  WriteRegM;
    logic MemWriteM;
    logic [31:0] ReadDataW, ALUOutW, ResultW;
    logic [4:0]  WriteRegW;
    logic MemtoRegW;
    
    // Seven segment display initialization
    display_controller sevenSeg(clk, ALUOutE[7:4], ALUOutE[3:0], instrD[7:4], instrD[3:0], seg, dp, an);
    
    top_mips topMips(pushedClk, pushedRst, instrF, PC, PCF, PcSrcD, MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD, WritetoRdD,
                     ALUcontrol, instrD, ALUOutE, WriteDataE, ForwardAE, ForwardBE, ForwardCE, ForwardAD, ForwardBD, RsData, RtData, RD1, RD2,RD3,  RD3E,
                     StallF, StallD, FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD,
                     PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE,
                     RsE, RtE, RdE, WriteRegE,
                     MemWriteE, ALUSrcE, RegDstE, WritetoRdE,
                     ALUControlE,
                     ALUOutM, WriteDataM, ReadDataM,
                     WriteRegM,
                     MemWriteM,
                     ReadDataW, ALUOutW, ResultW,
                     WriteRegW, MemtoRegW);
    
endmodule
#pulse_controller
`timescale 1ns / 1ps
//   does the following:
//     --debounces it (ignoring any addtional changes for ~40 milliseconds)
//     --synchronizes it with the clock edges
//     --produces just one pulse, lasting for one clock period
//   
//   Note that the 40 millisecond debounce time = 2000000 cycles of 
//   50MHz clock (which has 20 nsec period)
//   
//   Inputs/Outputs:
//   sw_input: the signal coming from the slide switch or pushbutton
//   CLK: the system clock on the BASYS3 board
//   clear: resets the pulse controller
//   clk_pulse: the synchronized debounced single-pulse output
//
//   Usage for CS224 Lab4-5: 
//   - Give the BASYS3 clock and the push button signal as inputs
//   - You don't need to clear the controller
//   - Send the output pulse to your top module
//   
//   For correct connections, carefully plan what should be in the .XDC file
//
//////////////////////////////////////////////////////////////////////////////////

module pulse_controller(
	input CLK, sw_input, clear,
	output reg clk_pulse );

	 reg [2:0] state, nextstate;
	 reg [27:0] CNT; 
	 wire cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule
# display controller
`timescale 1ns / 1ps
////////////////////////////////////////////////////////
//  
//  This module puts 4 hexadecimal values (from O to F) on the 4-digit 7-segment display unit
//  
//  Inputs/Outputs:  
//  clk: the system clock on the BASYS3 board
//  in3, in2, in1, in0: the input hexadecimal values. in3(left), in2, in1, in0(right)         
//  seg: the signals going to the segments of a digit.
//       seg[6] is CA for the a segment, seg[5] is CB for the b segment, etc
//  an:  anode, 4 bit enable signal, one bit for each digit
//       an[3] is the left-most digit, an[2] is the second-left-most, etc  
//  dp:  digital point
//  
//  Usage for CS224 Lab4-5: 
//  - Give the system clock of BASYS3 and the hexadecimal values you want to display as inputs.
//  - Send outputs to 7-segment display of BASYS3, using the .XDC file
//
//  Note: the an, seg and dp outputs are active-low, for the BASYS3 board
//
//  For correct connections, carefully plan what should be in the .XDC file
//   
////////////////////////////////////////////////////////

module display_controller(

input clk,
input [3:0] in3, in2, in1, in0,
output [6:0]seg, logic dp,
output [3:0] an
);

localparam N = 18;

logic [N-1:0] count = {N{1'b0}};
always@ (posedge clk)
count <= count + 1;

logic [4:0]digit_val;

logic [3:0]digit_en;
always@ (*)

begin
digit_en = 4'b1111;
digit_val = in0;

case(count[N-1:N-2])

2'b00 :	//select first 7Seg.

begin
digit_val = {1'b0, in0};
digit_en = 4'b1110;
end

2'b01:	//select second 7Seg.

begin
digit_val = {1'b0, in1};
digit_en = 4'b1101;
end

2'b10:	//select third 7Seg.

begin
digit_val = {1'b0, in2};
digit_en = 4'b1011;
end

2'b11:	//select forth 7Seg.

begin
digit_val = {1'b0, in3};
digit_en = 4'b0111;
end
endcase
end

//Convert digit number to LED vector. LEDs are active low.

logic [6:0] sseg_LEDs;
always @(*)
begin
sseg_LEDs = 7'b1111111; //default
case( digit_val)
5'd0 : sseg_LEDs = 7'b1000000; //to display 0
5'd1 : sseg_LEDs = 7'b1111001; //to display 1
5'd2 : sseg_LEDs = 7'b0100100; //to display 2
5'd3 : sseg_LEDs = 7'b0110000; //to display 3
5'd4 : sseg_LEDs = 7'b0011001; //to display 4
5'd5 : sseg_LEDs = 7'b0010010; //to display 5
5'd6 : sseg_LEDs = 7'b0000010; //to display 6
5'd7 : sseg_LEDs = 7'b1111000; //to display 7
5'd8 : sseg_LEDs = 7'b0000000; //to display 8
5'd9 : sseg_LEDs = 7'b0010000; //to display 9
5'd10: sseg_LEDs = 7'b0001000; //to display a
5'd11: sseg_LEDs = 7'b0000011; //to display b
5'd12: sseg_LEDs = 7'b1000110; //to display c
5'd13: sseg_LEDs = 7'b0100001; //to display d
5'd14: sseg_LEDs = 7'b0000110; //to display e
5'd15: sseg_LEDs = 7'b0001110; //to display f
5'd16: sseg_LEDs = 7'b0110111; //to display "="
default : sseg_LEDs = 7'b0111111; //dash 
endcase
end

assign an = digit_en;

assign seg = sseg_LEDs;
assign dp = 1'b1; //turn dp off

endmodule
# mips code
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/18/2022 04:39:07 AM
// Design Name: 
// Module Name: top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// Top level system including MIPS and memories
/*module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] PC, instr, readdata,           
	     output  logic       memwrite);    

    logic [31:0] instrF, PCF;
    logic PcSrcD
   // instantiate processor and memories  
   mips mips (clk, reset, instrF, PC, PCF, PCSrcD, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule
*/
// Define pipes that exist in the PipelinedDatapath. 
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk, posedge reset)
                  if(reset)
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else if(EN)
                        begin
                          if(clear) // Can clear only if the pipe is enabled, that is, if it is not stalling.
                            begin
                        	   instrD <= 0;
                        	   PcPlus4D <= 0;
                            end
                          else
                            begin
                        		instrD<=instr;
                        		PcPlus4D<=PcPlus4F;
                            end
                        end
                
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// ~StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset)
                    if(reset)
                        PCF <= 0;
                    else if(EN)
                        PCF <= PC;
endmodule

module PipeDtoE(input logic[31:0] RD1, RD2, RD3, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, WritetoRdD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, SignImmE, RD3E,
                output logic[4:0] RsE, RtE, RdE,
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE, WritetoRdE,
                output logic[2:0] ALUControlE);

        always_ff @(posedge clk, posedge reset)
          if(reset || clear)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                WritetoRdE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                RD3E <= 0;
                end
            else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                WritetoRdE <= WritetoRdD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                RD3E <= RD3;
                SignImmE <= SignImmD;
                end

endmodule

/* --------------------- My Code  Starts ------------------------------- */
module PipeEtoM(input logic[31:0] ALURes, WriteDataE,
                input logic[4:0] WriteRegE,
                input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic clk, reset,
                output logic[31:0] ALUOutM, WriteDataM,
                output logic[4:0] WriteRegM,
                output logic RegWriteM, MemtoRegM, MemWriteM);

        always_ff @(posedge clk, posedge reset)
          if(reset)
                begin
                // Control signals
                RegWriteM <= 0;
                MemtoRegM <= 0;
                MemWriteM <= 0;
                
                // Data
                WriteRegM <= 0;
                ALUOutM <= 0;
                WriteDataM <= 0;
                end
            else
                begin
                // Control signals
                RegWriteM <= RegWriteE;
                MemtoRegM <= MemtoRegE;
                MemWriteM <= MemWriteE;
                
                // Data
                WriteRegM <= WriteRegE;
                ALUOutM <= ALURes;
                WriteDataM <= WriteDataE;
                end
                  
endmodule
/* --------------------- My Code  Ends --------------------------------- */

/* --------------------- My Code  Starts ------------------------------- */
module PipeMtoW(input logic[31:0] ReadDataM, ALUOutM,
                input logic[4:0] WriteRegM,
                input logic RegWriteM, MemtoRegM,
                input logic clk, reset,
                output logic[31:0] ReadDataW, ALUOutW,
                output logic[4:0] WriteRegW,
                output logic RegWriteW, MemtoRegW);

        always_ff @(posedge clk, posedge reset)
          if(reset)
                begin
                // Control signals
                RegWriteW <= 0;
                MemtoRegW <= 0;
                
                // Data
                ReadDataW <= 0;
                ALUOutW <= 0;
                WriteRegW <= 0;
                end
            else
                begin
                // Control signals
                RegWriteW <= RegWriteM;
                MemtoRegW <= MemtoRegM;
                
                // Data
                ReadDataW <= ReadDataM;
                ALUOutW <= ALUOutM;
                WriteRegW <= WriteRegM;
                end
endmodule
/* --------------------- My Code  Ends --------------------------------- */


// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmD to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PcBranchD
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// *******************************************************************************

module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemtoRegD, MemWriteD, WritetoRdD, ALUSrcD, RegDstD, BranchD,
                output logic [31:0] instrF,		
                output logic [31:0] instrD, PC, PCF,
                output logic PcSrcD,                 
                output logic [31:0] ALUOutE, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE, ForwardCE,
                output logic ForwardAD, ForwardBD,
                output logic [31:0] RsData, RtData, RD1, RD2, RD3, RD3E,
                output logic StallF, StallD, FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD,
                output logic [31:0] PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE,
                output logic [4:0]  RsE, RtE, RdE, WriteRegE,
                output logic MemWriteE, ALUSrcE, RegDstE, WritetoRdE,
                output logic [2:0]  ALUControlE,
                output logic [31:0] ALUOutM, WriteDataM, ReadDataM,
                output logic [4:0]  WriteRegM,
                output logic MemWriteM,
                output logic [31:0] ReadDataW, ALUOutW, ResultW,
                output logic [4:0]  WriteRegW,
                output logic MemtoRegW); // Add or remove input-outputs if necessary

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************
  
  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, PcBranchD, PcPlus4F;	
  
	//* You should define others down below
	/* --------------------- My Code  Starts ------------------------------- */

    
    
    
    logic zero; // not used
    logic [31:0] SignImmShifted;
    logic [31:0] tempALUResE;
    logic [31:0] secTempALUResE;
    logic [31:0] Rd3Muxed;
    
    /* --------------------- My Code  Ends --------------------------------- */      

	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************

  
  	//* We have provided you with some part of the datapath
    
  	// Instantiate PipeWtoF
  	PipeWtoF pipe1(PC,
                ~StallF, clk, reset,
                PCF);
  
  	// Do some operations
    assign PcPlus4F = PCF + 4;
    assign PcSrcB = PcBranchD;
	assign PcSrcA = PcPlus4F;
  	mux2 #(32) pc_mux(PcSrcA, PcSrcB, PcSrcD, PC);

    imem im1(PCF[7:2], instrF);
    
    /* --------------------- My Code  Starts ------------------------------- */
  	
  	// Instantiate PipeFtoD
  	PipeFtoD pipe2(instrF, PcPlus4F, 
                ~StallD, PCSrcD, clk, reset,
                instrD, PcPlus4D);
  
  	// Do some operations
    // next PC logic
    sl2         immsl(SignImmD, SignImmShifted);
    adder       pcadd2(PcPlus4D, SignImmShifted, PcBranchD);

    // register file logic
    regfile     rf (clk, reset, RegWriteW, instrD[25:21], instrD[20:16], instrD[15:11], WriteRegW,
                   ResultW, RD1, RD2, RD3);
    signext     se (instrD[15:0], SignImmD);
    mux2 #(32)  srcaMux  (RD1, ALUOutM, ForwardAD, compA);
    mux2 #(32)  srcbMux  (RD2, ALUOutM, ForwardBD, compB);
    always_comb begin
        if (compA == compB)
            EqualD = 1'b1;
        else
            EqualD = 1'b0;
        PcSrcD = BranchD & EqualD;
    end

  	// Instantiate PipeDtoE
    PipeDtoE pipe3(RD1, RD2, RD3, SignImmD, instrD[25:21], instrD[20:16], instrD[15:11], RegWriteD, MemtoRegD, MemWriteD,
                   ALUSrcD, RegDstD, WritetoRdD, ALUControlD, FlushE, clk, reset, RsData, RtData, SignImmE,  RD3E, RsE, RtE, RdE,
                   RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE, WritetoRdE, ALUControlE);
    
  	// Do some operations
  	mux4 #(32)   SrcAEmux (RsData, ResultW, ALUOutM, 32'h00000000, ForwardAE, SrcAE);
  	mux4 #(32)   WriteDataEmux (RtData, ResultW, ALUOutM, 32'h00000000, ForwardBE, WriteDataE);
    mux4 #(32)   Rd3Mux (RD3E, ResultW, ALUOutM, 32'h00000000, ForwardCE, Rd3Muxed);
  	
  	mux2 #(32)   SrcBEmux (WriteDataE, SignImmE, ALUSrcE, SrcBE);
  	
  	mux2 #(5)    WriteRegEmux (RtE, RdE, RegDstE, WriteRegE);
    alu          ALU (SrcAE, SrcBE, ALUControlE, tempALUResE, zero);
    adder        ALURd3Adder (tempALUResE, Rd3Muxed, secTempALUResE);
    mux2 #(32)   ALUResEmux (tempALUResE, secTempALUResE, WritetoRdE, ALUOutE);

   
  	// Instantiate PipeEtoM
    PipeEtoM pipe4(ALUOutE, WriteDataE, WriteRegE, RegWriteE, MemtoRegE, MemWriteE, clk, reset,
                   ALUOutM, WriteDataM, WriteRegM, RegWriteM, MemtoRegM, MemWriteM);  
  	
  	// Do some operations
    dmem DMem(clk, MemWriteM, ALUOutM, WriteDataM, ReadDataM);
    
  	// Instantiate PipeMtoW            
    PipeMtoW pipe5(ReadDataM, ALUOutM, WriteRegM, RegWriteM, MemtoRegM, clk, reset, ReadDataW, ALUOutW, WriteRegW,
                   RegWriteW, MemtoRegW);
                     
  	// Do some operations
  	mux2 #(32)   ResultWmux (ALUOutW, ReadDataW, MemtoRegW, ResultW);
  	
  	// Initialize Hazard Unit
  	HazardUnit hazardUnit(RegWriteW, BranchD, WriteRegW, WriteRegE, RegWriteM, MemtoRegM, 
  	                      WriteRegM, RegWriteE, MemtoRegE, RsE, RtE, RdE, instrD[25:21], instrD[20:16], instrD[15:11], ForwardAE, ForwardBE, ForwardCE, FlushE, StallD,
  	                      StallF, ForwardAD, ForwardBD);
  	
    /* --------------------- My Code  Ends --------------------------------- */  	

endmodule

module HazardUnit( input logic RegWriteW, BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE, rdE,
                input logic [4:0] rsD,rtD, rdD,
                output logic [1:0] ForwardAE,ForwardBE, ForwardCE,
                output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary
       
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
	/* --------------------- My Code  Starts ------------------------------- */
	logic lwstall;
	logic branchstall;
    always_comb begin
        // Forwarding Logic For ForwardAE
        if ((rsE != 0) & (rsE == WriteRegM) & RegWriteM)
            begin
            ForwardAE = 2'b10;
            end
        else if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW)
        begin
            ForwardAE = 2'b01;
        end
        else
            ForwardAE = 2'b00;

        // Forwarding Logic For ForwardBE
        if ((rtE != 0) & (rtE == WriteRegM) & RegWriteM)
            begin
            ForwardBE = 2'b10;
            end
        else if ((rtE != 0) & (rtE == WriteRegW) & RegWriteW)
        begin
            ForwardBE = 2'b01;
        end
        else
            ForwardBE = 2'b00;
        
        // Forwarding Logic For ForwardCE
        if ((rdE != 0) & (rdE == WriteRegM) & RegWriteM)
            begin
            ForwardCE = 2'b10;
            end
        else if ((rdE != 0) & (rdE == WriteRegW) & RegWriteW)
        begin
            ForwardCE = 2'b01;
        end
        else
            ForwardCE = 2'b00;
            
        // for stalling and flushing
        lwstall = ((rsD == rtE) | (rtD == rtE)) & MemtoRegE;
        branchstall = (BranchD & RegWriteE & ((WriteRegE == rsD) | (WriteRegE == rtD))) |
                      (BranchD & MemtoRegM & ((WriteRegM == rsD) | (WriteRegM == rtD)));
        StallF = (lwstall | branchstall);
        StallD = (lwstall | branchstall);
        FlushE = (lwstall | branchstall);
                
        // Forwarding Logic For ForwardAD
        if ((rsD != 0) & (rsD == WriteRegM) & RegWriteM)
            ForwardAD = 1'b1;
        else
            ForwardAD = 1'b0;
        
        // Forwarding Logic For ForwardBD
        if ((rtD != 0) & (rtD == WriteRegM) & RegWriteM)
            ForwardBD = 1'b1;
        else
            ForwardBD = 1'b0;
    end
    /* --------------------- My Code  Ends --------------------------------- */
endmodule


// You can add some more logic variables for testing purposes
// but you cannot remove existing variables as we need you to output 
// these vALUes on the waveform for grading
module top_mips (input  logic        clk, reset,
             output  logic[31:0]  instrF,
             output logic[31:0] PC, PCF,
             output logic PcSrcD,
             output logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD, WritetoRdD,
             output logic [2:0]  ALUcontrol,
             output logic [31:0] instrD, 
             output logic [31:0] ALUOutE, WriteDataE,
             output logic [1:0] ForwardAE, ForwardBE, ForwardCE,
             output logic ForwardAD, ForwardBD,
             output logic [31:0] RsData, RtData, RD1, RD2, RD3, RD3E,
             output logic StallF, StallD, FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD,
             output logic [31:0] PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE,
             output logic [4:0]  RsE, RtE, RdE, WriteRegE,
             output logic MemWriteE, ALUSrcE, RegDstE, WritetoRdE,
             output logic [2:0]  ALUControlE,
             output logic [31:0] ALUOutM, WriteDataM, ReadDataM,
             output logic [4:0]  WriteRegM,
             output logic MemWriteM,
             output logic [31:0] ReadDataW, ALUOutW, ResultW,
             output logic [4:0]  WriteRegW,
             output logic MemtoRegW);


	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified) signatures
	// and corresponding connections.
	// ********************************************************************
	/* --------------------- My Code  Starts ------------------------------- */
    datapath Datapath (clk, reset, ALUcontrol, RegWriteD, MemtoRegD, MemWriteD, WritetoRdD, ALUSrcD, RegDstD, BranchD, instrF,
                       instrD, PC, PCF, PcSrcD, ALUOutE, WriteDataE, ForwardAE, ForwardBE, ForwardCE, ForwardAD, ForwardBD, RsData, RtData, RD1, RD2, RD3, RD3E,
                       StallF, StallD,FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD,
                       PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE,
                       RsE, RtE, RdE, WriteRegE,
                       MemWriteE, ALUSrcE, RegDstE, WritetoRdE,
                       ALUControlE,
                       ALUOutM, WriteDataM, ReadDataM,
                       WriteRegM,
                       MemWriteM,
                       ReadDataW, ALUOutW, ResultW,
                       WriteRegW,
                       MemtoRegW);
    controller Controller (instrD[31:26], instrD[5:0], MemtoRegD, MemWriteD, WritetoRdD, ALUSrcD, RegDstD, RegWriteD, ALUcontrol,
                           BranchD);
    /* --------------------- My Code  Ends --------------------------------- */
endmodule


// External instruction memory used by MIPS
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-e.
//  An example test program is given below.        
//	***************************************************************************
//
//		address		instruction
//		-------		-----------
        
       8'h00: instr = 32'h20080005;    // addi $t0, $zero, 5              
       8'h04: instr = 32'h2009000c;    // addi $t1, $zero, 12
       8'h08: instr = 32'h200a0006;    // addi $t2, $zero, 6
       8'h0c: instr = 32'h210bfff7;    // addi $t3, $t0, -9
       8'h10: instr = 32'h01288025;    // or $s0, $t1, $t0
       8'h14: instr = 32'h012a8824;    // and $s1, $t1, $t2
       8'h18: instr = 32'h010b9020;    // add $s2, $t0, $t3
       8'h1c: instr = 32'h010a202a;    // slt $a0, $t0, $t2
       8'h20: instr = 32'h02112820;    // add $a1, $s0, $s1
       8'h24: instr = 32'h02493022;    // sub $a2, $s2, $t1
       8'h28: instr = 32'had320074;    // sw $s2, 0x74($t1)
       8'h2c: instr = 32'h8c020080;    // lw $v0, 0x80($zero) 
       
       // Compute Use (now srcacc)
       8'h30: instr = 32'h20080004 ;//addi $t0, $zero, 4 
       8'h34: instr = 32'h20090002 ;//addi $t1, $zero, 2 
       8'h38: instr = 32'h210a0005 ;//addi $t2, $t0, 5   
       8'h3c: instr = 32'h0109503f ;//sracc $t2, $t0, $t1
       8'h40: instr = 32'h0109503f ;//sracc $t2, $t0, $t1
       8'h44: instr = 32'h21080004 ;//addi $t0, $t0, 4   
       8'h48: instr = 32'h0109503f ;//srcacc $t2, $t0, $t1
       8'h4c: instr = 32'h01098024 ;//and $s0, $t0, $t1  
       8'h50: instr = 32'h01108820 ;//add $s1, $t0, $s0  
       8'h54: instr = 32'h0211503f ;//sracc $t2, $s0, $s1
       8'h58: instr = 32'h0109803f ;//sracc $s0, $t0, $t1
       /*8'h30: instr = 32'h20080005;  //addi $t0, $zero, 5             
       8'h34: instr = 32'h21090007;  //addi $t1, $t0, 7
       8'h38: instr = 32'h210a0002;  //addi $t2, $t0, 2
       8'h3c: instr = 32'h012a5025;  //or $t2, $t1, $t2
       8'h40: instr = 32'h01498024;  //and $s0, $t2, $t1
       8'h44: instr = 32'h01108820;  //add $s1, $t0, $s0
       8'h48: instr = 32'h0151902a;  //slt $s2, $t2, $s1
       8'h4c: instr = 32'h02318820;  //add $s1, $s1, $s1
       8'h50: instr = 32'h02329822;  //sub $s3, $s1, $s2
       8'h54: instr = 32'had330074;  //sw $s3, 0x74($t1)
       8'h58: instr = 32'h8c020080;  //lw $v0, 0x80($zero)*/
       
       // Test code for load-use hazard
       8'h5c: instr = 32'h20080005 ; //addi $t0, $zero, 5
       8'h60: instr = 32'hac080060 ; //sw $t0, 0x60($zero)
       8'h64: instr = 32'h8c090060 ; //lw $t1, 0x60($zero)
       8'h68: instr = 32'h212a0004 ; //addi $t2, $t1, 4
       
       // Test for branch hazard
       8'h6c: instr = 32'h20080005 ; //addi $t0, $zero, 5
       8'h70: instr = 32'h20090003 ; //addi $t1, $zero, 3
       8'h74: instr = 32'h1109fffd ; //beq  $t0, $t1, -2
       8'h78: instr = 32'h21290002 ; //addi $t1, $t1, 2
       8'h7c: instr = 32'h1109fffb ; //beq  $t0, $t1, -2
       8'h80: instr = 32'h21290002 ; //addi $t1, $t1, 2
       
       
       
       
       
       
       
      
       
       
       
       

	   /*8'h00: instr = 32'h20080007;     // addi $t0, $zero, 7
	   8'h04: instr = 32'h21080007;     // addi $t0, $zero, 7
       //8'h04: instr = 32'h20090005;   // addi $t1, $zero, 5
       8'h08: instr = 32'h200a0000;     // addi $t2, $zero, 0
       8'h0c: instr = 32'h210b000f;     // addi $t3, $t0, 15
       8'h10: instr = 32'h01095020;     // add  $t2, $t0, $t1
       8'h14: instr = 32'h01095025;     // or   $t2, $t0, $t1
       8'h18: instr = 32'h01095024;     // and  $t2, $t0, $t1
       8'h1c: instr = 32'h01095022;     // sub  $t2, $t0, $t1
       8'h20: instr = 32'h0109502a;     // slt  $t2, $t0, $t1
       8'h24: instr = 32'had280002;     // sw   $t0, 2($t1)   
       8'h28: instr = 32'h8d090000;     // lw   $t1, 0($t0)
       8'h2c: instr = 32'h1100fff5;     // beq  $t0, $zero, 0xFFF5
       8'h30: instr = 32'h200a000a;     // addi $t2, $zero, 0x000A
       8'h34: instr = 32'h2009000c;     // addi $t1, $zero, 0x000C*/
       default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all..
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite, WritetoRdD,
                  output logic     ALUsrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] ALUcontrol,
                  output logic branch);

   logic [1:0] ALUop;
   always_comb begin
        if (op == 6'b000000 && funct == 6'b111111)
            WritetoRdD = 1'b1;
        else
            WritetoRdD = 1'b0;
   end
   maindec md (op, memtoreg, memwrite, branch, ALUsrc, regdst, regwrite, ALUop);

   ALUdec  ad (funct, ALUop, ALUcontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)
endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic ALUsrc, regdst, regwrite,
	              output logic[1:0] ALUop );
  logic [7:0] controls;

   assign {regwrite, regdst, ALUsrc, branch, memwrite,
                memtoreg,  ALUop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 8'b11000010; // R-type
      6'b100011: controls <= 8'b10100100; // LW
      6'b101011: controls <= 8'b00101000; // SW
      6'b000100: controls <= 8'b00010001; // BEQ
      6'b001000: controls <= 8'b10100000; // ADDI
      default:   controls <= 8'bxxxxxxxx; // illegal op
    endcase
endmodule

module ALUdec (input    logic[5:0] funct,
               input    logic[1:0] ALUop,
               output   logic[2:0] ALUcontrol);
  always_comb
    case(ALUop)
      2'b00: ALUcontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: ALUcontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: ALUcontrol  = 3'b010; // ADD
          6'b100010: ALUcontrol  = 3'b110; // SUB
          6'b100100: ALUcontrol  = 3'b000; // AND
          6'b100101: ALUcontrol  = 3'b001; // OR
          6'b101010: ALUcontrol  = 3'b111; // SLT
          6'b111111: ALUcontrol  = 3'b011; // sra
          default:   ALUcontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, ra3, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2, rd3);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;
  	 else if(reset)
       for (int i=0; i<32; i++) rf[i] = {32{1'b0}};	

  always_comb begin
    if (ra1 != 0)
        rd1 = rf[ra1];
    else
        rd1 = 0;
    if (ra2 != 0)
        rd2 = rf[ra2];
    else
        rd2 = 0;
    if (ra3 != 0)
        rd3 = rf[ra3];
    else
        rd3 = 0;
  end

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  ALUcont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(ALUcont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            3'b011: result = a >> b;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? ( s[0] ? d3 : d2 ) : (s[0] ? d1 : d0); 
endmodule
# test bench
`timescale 1ns / 1ps

module test_bench();
    logic clk, reset;
    logic [31:0] instrF, PC, PCF;
    logic PcSrcD, MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD, WritetoRdD, WritetoRdE;
    logic [2:0]  ALUcontrol;
    logic [31:0] instrD, ALUOutE, WriteDataE, RsData, RtData, RD1, RD2, RD3, RD3E;
    logic [1:0]  ForwardAE, ForwardBE, ForwardCE;
    logic ForwardAD, ForwardBD;
    logic StallF, StallD, FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD;
    logic [31:0] PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE;
    logic [4:0]  RsE, RtE, RdE, WriteRegE;
    logic MemWriteE, ALUSrcE, RegDstE;
    logic [2:0]  ALUControlE;
    logic [31:0] ALUOutM, WriteDataM, ReadDataM;
    logic [4:0]  WriteRegM;
    logic MemWriteM;
    logic [31:0] ReadDataW, ALUOutW, ResultW;
    logic [4:0]  WriteRegW;
    logic MemtoRegW;
    top_mips topMips(clk, reset, instrF, PC, PCF, PcSrcD, MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD, WritetoRdD,
                     ALUcontrol, instrD, ALUOutE, WriteDataE, ForwardAE, ForwardBE, ForwardCE, ForwardAD, ForwardBD, RsData, RtData, RD1, RD2,RD3,  RD3E,
                     StallF, StallD, FlushE, MemtoRegE, RegWriteE, MemtoRegM, RegWriteM, RegWriteW, EqualD,
                     PcPlus4D, SignImmD, compA, compB, SignImmE, SrcAE, SrcBE,
                     RsE, RtE, RdE, WriteRegE,
                     MemWriteE, ALUSrcE, RegDstE, WritetoRdE,
                     ALUControlE,
                     ALUOutM, WriteDataM, ReadDataM,
                     WriteRegM,
                     MemWriteM,
                     ReadDataW, ALUOutW, ResultW,
                     WriteRegW, MemtoRegW);
    initial begin
        clk = 0;
        reset = 1; #40;
        reset = 0;
    end
    always #10 clk <= ~clk;
endmodule