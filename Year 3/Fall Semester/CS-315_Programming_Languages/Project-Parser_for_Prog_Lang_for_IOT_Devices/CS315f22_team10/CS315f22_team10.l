char_letter					[a-zA-Z]
digit 						[0-9]
ascii_txt					[^\n]
sign						[+|-]
nl							\n
equals_operation			==
not_equals_operation		!=
greater_than_operation		>
greater_equal_operation		>=
less_than_operation			<
less_equal_operation		<=
quote  						\"
and_operation				&&
or_operation				\|\|
dot							\.
separator					,
num_type					int|float
primitive_type				string|bool|double
bool_val					true|false
terminate_op				;
assign_op  					=
add_op  					\+
sub_op 						\-
mult_op 					\*
comment_symbol 				\/\/
div_op				 		\/
lp 						\(
rp 						\)
lb 						\{
rb 						\}
%%
{comment_symbol}{ascii_txt}*	return(COMMENT);
{digit}						    return(DIGIT);
{num_type}					    return(NUM_VARIABLE_TYPE);
{primitive_type}			    return(PRIMITIVE_VARIABLE_TYPE);
for                   		    return(FOR);
while                        	return(WHILE);
if                              return(IF);
else                          	return(ELSE);
conn    					return(CONNECTION);
fun		   				    return(FUNCTION);
connectURL 					return(CONNECT_URL);
changeSwitchStateAndControlActuator		return(SWITCH_AND_ACTUATOR);
getTimestamp					return(GET_TIMESTAMP);
readTemp						return(READ_TEMP);
readHumidity					return(READ_HUMIDITY);
readAirPressure					return(READ_AIR_PRESSURE);
readAirQuality				    return(READ_AIR_QUALITY);
readLightLevel					return(READ_LIGHT_LEVEL);
readSoundLevel					return(READ_SOUND_LEVEL);
getDataFromConn					return(GET_DATA_FROM_CONN);
sendDataByConn					return(SEND_DATA_BY_CONN);
input						return(INPUT);
print 						return(PRINT);
return						return(RETURN);
{lb}					  	return(LB);
{rb}				         	return(RB);
{lp}				   		return(LP);
{rp}		     				return(RP);
{and_operation}					return(AND_OP);
{or_operation}					return(OR_OP);
{less_equal_operation}				return(LESS_EQUAL_OP);
{less_than_operation}				return(LESS_THAN_OP);
{greater_equal_operation}			return(GREATER_EQUAL_OP);
{greater_than_operation}			return(GREATER_THAN_OP);
{not_equals_operation}				return(NOT_EQUALS_OP);
{equals_operation}				return(EQUALS_OP);
{terminate_op} 					return(END_OF_STMT);
{assign_op} 				    return(ASSIGNMENT_OP);
{add_op} 					return(ADDITION_OP);
{sub_op} 					return(SUBTRACTION_OP);
{div_op} 		 			return(DIVISION_OP);
{mult_op} 				    return(MULTIPLICATION_OP);
{separator} 				return(COMMA);
{dot}						return(DOT);
{sign}?{digit}{2,}			return(INTEGER);
{sign}?{digit}*{dot}?{digit}+			return(FLOAT);
{quote}(\")*{ascii_txt}*{quote}			return(STRING);
{bool_val}					return(BOOL);
{char_letter}({char_letter}|{digit})*	return(IDENTIFIER);
{nl}						{ extern int lineno; lineno++;}
.                           ;
%%
int yywrap() { return 1; }